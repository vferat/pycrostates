trigger:
  batch: false
  branches:
    include:
      - 'main'

pr:
  branches:
    include:
      - '*'

stages:
- stage: Check
  jobs:
    - job: Skip
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        NO_SKIP: 'true'
        BUILD_REASON: $(Build.Reason)
      steps:
      - bash: |
          git_log=`git log --format=oneline -n 1 --skip=1`
          echo "##vso[task.setvariable variable=log]$git_log"
        displayName: Retrieve git log
      - bash: echo "##vso[task.setvariable variable=NO_SKIP]false"
        condition: and(eq(variables.BUILD_REASON, 'PullRequest'), or(contains(variables.log, '[skip azp]'), contains(variables.log, '[azp skip]'), contains(variables.log, '[skip ci]'), contains(variables.log, '[ci skip]')))
        displayName: Check for skip flags
      - bash: echo "##vso[task.setvariable variable=start_main;isOutput=true]$NO_SKIP"
        name: result
        displayName: Store result in start_main

- stage: Tests
  condition: and(succeeded(), eq(dependencies.Check.outputs['Skip.result.start_main'], 'true'))
  dependsOn: ['Check']
  jobs:
  - job: pytest
    timeoutInMinutes: 30
    variables:
      CACHE_PATH_MNE_LINUX: /home/vsts/mne_data
      CACHE_PATH_MNE_MACOS: /Users/runner/mne_data
      CACHE_PATH_MNE_WINDOWS: C:\Users\VssAdministrator\mne_data
      CODECOV_OS: Linux
      CODECOV_PYTHON_VERSION: 3.9
      MPLBACKEND: agg
    strategy:
      matrix:
        linux 3.7:
          VM_IMAGE: 'ubuntu-latest'
          PYTHON_VERSION: '3.7'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_LINUX)
        linux 3.8:
          VM_IMAGE: 'ubuntu-latest'
          PYTHON_VERSION: '3.8'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_LINUX)
        linux 3.9:
          VM_IMAGE: 'ubuntu-latest'
          PYTHON_VERSION: '3.9'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_LINUX)
        linux 3.10:
          VM_IMAGE: 'ubuntu-latest'
          PYTHON_VERSION: '3.10'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_LINUX)
        linux 3.10 MNE-dev:
          VM_IMAGE: 'ubuntu-latest'
          PYTHON_VERSION: '3.10'
          MNE_DEV: true
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_LINUX)
        macOS 3.7:
          VM_IMAGE: 'macOS-latest'
          PYTHON_VERSION: '3.7'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_MACOS)
        macOS 3.8:
          VM_IMAGE: 'macOS-latest'
          PYTHON_VERSION: '3.8'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_MACOS)
        macOS 3.9:
          VM_IMAGE: 'macOS-latest'
          PYTHON_VERSION: '3.9'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_MACOS)
        macOS 3.10:
          VM_IMAGE: 'macOS-latest'
          PYTHON_VERSION: '3.10'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_MACOS)
        windows 3.7:
          VM_IMAGE: 'windows-latest'
          PYTHON_VERSION: '3.7'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_WINDOWS)
        windows 3.8:
          VM_IMAGE: 'windows-latest'
          PYTHON_VERSION: '3.8'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_WINDOWS)
        windows 3.9:
          VM_IMAGE: 'windows-latest'
          PYTHON_VERSION: '3.9'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_WINDOWS)
        windows 3.10:
          VM_IMAGE: 'windows-latest'
          PYTHON_VERSION: '3.10'
          MNE_DEV: false
          CACHE_MNE_PATH: $(CACHE_PATH_MNE_WINDOWS)
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        architecture: 'x64'
        addToPath: true
      displayName: 'Setup Python $(PYTHON_VERSION)'
    - script: |
        python -m pip install --progress-bar off --upgrade pip setuptools wheel
        python -m pip install --progress-bar off .[test]
      displayName: 'Install dependencies and MNE (stable)'
    - script: |
        python -m pip uninstall -y mne
        python -m pip install --progress-bar off --no-deps https://github.com/mne-tools/mne-python/archive/main.zip
      condition: eq(variables.MNE_DEV, 'true')
      displayName: 'Install MNE (main)'
    - script: mne sys_info -pd
      displayName: 'Display MNE config'
    - script: |
        curl https://raw.githubusercontent.com/mne-tools/mne-testing-data/master/version.txt -o mne_testing_data_version.txt
      displayName: "Retrieve MNE testing dataset version"
    - task: Cache@2
      inputs:
        key: '"mne_testing_data" | mne_testing_data_version.txt'
        path: $(CACHE_MNE_PATH)
        cacheHitVar: CACHE_MNE_RESTORED
      displayName: 'Cache MNE testing dataset'
    - script: python -c "import mne; mne.datasets.testing.data_path(verbose=True)"
      displayName: 'Get MNE testing datataset'
      condition: ne(variables.CACHE_MNE_RESTORED, 'true')
    - script: pytest pycrostates --junitxml=junit/test-results.xml --cov=pycrostates --cov-report=xml
      displayName: 'Run unit tests'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    - bash: bash <(curl -s https://codecov.io/bash)
      condition: and(eq(variables['Agent.OS'], variables.CODECOV_OS), eq(variables.PYTHON_VERSION, variables.CODECOV_PYTHON_VERSION))
      displayName: 'Upload to codecov.io'
